/* --- New requests --- */

async function getTokens(user, pass, captcha){
    
  const 
      client_id = LOCAL.client_id,
      grant_type = LOCAL.grant_type,
      os = LOCAL.os, // 1 for Android
      device_id = LOCAL.device_id,  // generated by us
      app_id = LOCAL.app_id,   // last android version id
      username = user,
      password = pass,
      captcha_challenge = captcha || '',
      request = LOCAL.tokenURL,
      params = makeReqParams({
          client_id,
          grant_type,
          os,
          device_id,
          app_id,
          username,
          password,
          captcha_challenge
      });

    const json = await makeRequest(params, request);

    console.log('###Options Server respons: ', json, user, pass, captcha);

    return json;
}

async function getCaptcha() {
    
  const 
    myHeaders = new Headers({'Content-Type': 'application/x-www-form-urlencoded'}),
    myInit = {
        method: "POST",
        headers: myHeaders,
        mode: "cors",
        cache: "default",
        body: `device_id=${LOCAL.device_id}&type_id=1`
    };

  const res = await fetch('https://passport.abv.bg/app/profiles/nativeclient/captcha', myInit)
    .then(response => response.blob())
    .then(res => convertToBase64(res))
    .then(base64 => base64)
    .catch(err => {
        console.error('Error while converting:', err);
    });
    
  $('.enterCaptcha')
    .show()
    .find('input')
    .val('');
    
  $('#captchaCode').prop('src', res);

  function convertToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onloadend = () => {
        resolve(reader.result);
      };
      
      reader.onerror = reject;
      reader.readAsDataURL(blob);

    });
  }
    
}

async function getFoldersInfo(token, captcha){
  const
      access_token = token,
      captcha_challenge = captcha || '',
      request = LOCAL.foldersURL,
      params = makeReqParams({
          access_token,
          captcha_challenge
      });

  return makeRequest(params, request);
}

/* --- Helpers --- */

async function makeRequest(params, request) {
  const 
    myHeaders = new Headers({'Content-Type': 'application/x-www-form-urlencoded'}),
    myInit = {
        method: "POST",
        headers: myHeaders,
        mode: "cors",
        cache: "default",
        body: params
    },
    res = await fetch(request, myInit)
      .then(response => response.text())
      .catch( err => JSON.stringify( { 
          result: { error: 'ERROR_REQUEST_FAILED', response: err } 
      } ) );

  let json = JSON.parse( res );

  log('#Response json request:', json);

  return json;
  
}

function makeReqParams(o){
  /*
    Object function parameter example: 
      {
          access_token: LOCAL.access_token,
          captcha_challenge: ''
      }
  */
  return Object.entries(o)
    .reduce((a, b) => {
        a += `${b[0]}=${b[1]}&`
        return a;
    }, ``)
    .replace(/(\&)$/, '');
}

/* --- New requests end --- */

function genSalt(length) {
  const 
    chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz~!@#$%^&*()_+-=`";:,./<>?|';

  let result = '';

  for (let i = 0; i < length; i++) {
    const rnum = Math.floor(Math.random() * chars.length);
	  result += chars.substring(rnum, rnum + 1);
  }
  
  return result;
}

function getMsg(name, vars) {
  return chrome.i18n.getMessage(name, vars);
}

function isFolderNotSpam(f){
  const
    name = decodeHTMLEntities(f.name),
    check = name === 'Спам' &&  !LOCAL.options.excludeSpam || name !== 'Спам';
  return check;
}

function isFolderNotTrash(f){
  const 
    name = decodeHTMLEntities(f.name),
    check = name === 'Кошче' && !LOCAL.options.excludeTrash || name !== 'Кошче';
  return check;
}

function getCount(folders){
  let count = 0;
  folders.map( f => 
    count += 'newItems' in f && isFolderNotSpam(f) && isFolderNotTrash(f) ? parseInt( f.newItems ) : 0 
  );
  return count;
}

function decodeHTMLEntities(inputString) {
  return inputString.replace(/&#(\d+);/g, function(match, dec) {
      return String.fromCharCode(dec);
  });
}

function localeString(id, name, vars) {
  $('#' + id).html(getMsg(name, vars));
}

function localize() {

  var title = $('head title').html();

  if (title !== null) {
    
    title = title.replace(/__MSG_([^_]+)__/g, function (m, key) {
      return chrome.i18n.getMessage(key);
    });

    $('head > title').html(title);
  }
  
  let html = $('body').html();
  
  html = html.replace(/__MSG_([^_]+)__/g, function (m, key) {
    return chrome.i18n.getMessage(key);
  });

  $('body').html(html);
}

function getPropFromUrl(name) {
  
  name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");

  const 
    regexS = '[\\?&]'+name+'=([^&#]*)', 
    regex = new RegExp( regexS ),
    results = regex.exec( window.location.href );
  
  if (results === null)
    return '';
  else
	  return results[1];

}

/* --- SETTERS AND GETTERS FOR LOCCAL VARS --- */

function setTotalUnread(x) {
  LOCAL = LOCAL || {};
  LOCAL.totalUnread = parseInt(x) || 0;
}

function getTotalUnread() {
  const storage = { ...LOCAL || {}, ...{} };
  return parseInt( storage.totalUnread ) || 0;
}

function setLastTotalUnread(x) {
  LOCAL = LOCAL || {};
  LOCAL.lastTotalUnread = parseInt(x) || 0;
}

function getLastTotalUnread() {
  const storage = { ...LOCAL || {}, ...{} };
  return parseInt( storage.lastTotalUnread ) || 0;
}

function setGlobalErr(x) {
  LOCAL = LOCAL || {};
  LOCAL = { ...LOCAL, ...{ globalErr: !!x } };
}

function getGlobalErr() {
  const storage = { ...LOCAL || { globalErr: false }, ...{} };
  return !!storage.globalErr;
}

function setConnErr(x) {
  LOCAL = LOCAL || {};
  LOCAL = { ...LOCAL, ...{ connErr: !!x } };
}

function getConnErr() {
  const storage = { ...LOCAL || { connErr: false }, ...{} };
  return !!storage.connErr;
}

function setLastManCheck(x) {
  LOCAL = LOCAL || {};
  LOCAL.lastManCheck = parseInt(x) || 0;
}

function getLastManCheck() {
  LOCAL = LOCAL || { lastManCheck: 0 };
  if (!LOCAL.lastManCheck)
    return 0;
  else 
    return parseFloat(LOCAL.lastManCheck);
}

function getOptions() {
  const 
    storage = { ...LOCAL || {}, ...{} },
    def = {
      checkInterval: 5,
      playSound: false,
      showNotif: true,
      excludeSpam: false,
      excludeTrash: false,
    };
  return storage.options || def;
}

function saveOptions(options) {
  LOCAL.options = options;
  saveLocalStorage(LOCAL);
}

function getAccounts() {
  LOCAL = LOCAL || { accounts: [] };
  return LOCAL.accounts || [];
}

function getAccount(email) {
  
  const 
    accounts = getAccounts(), 
    acc = accounts.filter( account => account.email === email );
  
  return acc.length? acc[0] : {};

}

/* --- SETTERS AND GETTERS FOR LOCAL VARS End --- */

// -- Get or Set Data from/in Chrome Local --

function sendMessage(msg){
  chrome.runtime.sendMessage(msg, response => {
    log('#Received data: #', response); // log ok
  });
}

// sendToExec('checkAllAccounts');
function sendToExec(name) {
  sendMessage( { execute: name } );
}

async function clearLocalStorage(){
  return chrome.storage.local.clear(function() {
      const error = chrome.runtime.lastError;
      if (error) {
          console.error(error);
      }
  }).then( () => true );
}

/* Storage functions */

async function saveLocalStorage(obj){
  LOCAL = { ...LOCAL, ...obj };
  return setInLocal( 'storage', LOCAL );
}

async function getLocalStorage(){
  const storage = await getFromLocal('storage') || {};
  log('###Get my storage from Interface: ', storage, LOCAL ); // log ok
  LOCAL = { ...LOCAL, ...storage };
  return LOCAL;
}

async function setInLocal(key, obj){
  
  const
      accounts = obj.accounts || [],
      accounts_obj = { accounts };

  let option_obj = Object.assign({}, obj);
  delete option_obj.accounts;

  await syncSet(key + '_options', option_obj);
  log( `###Interface - Set in local store: ${key}! \n - options: `, option_obj, '\n - accounts: ', accounts_obj ); // log ok

  return syncSet(key + '_accounts', accounts_obj );
}

async function getFromLocal(key){
  const 
      obj_options = await syncGet(key + '_options'),
      obj_accounts = await syncGet(key + '_accounts');

  return { ...obj_options, ...obj_accounts };
}

async function syncSet( key, obj ) {

  return new Promise((resolve, reject) => {

    try {
      chrome.storage.sync.set( makeSmallObjs(key, obj) ).then(() => {
        resolve({ success: true })
      });
    } catch(error){
      reject({ error });
    }

  });

  function makeSmallObjs(key, obj){
      const 
          quota = chrome.storage.sync.QUOTA_BYTES_PER_ITEM/1.1, 
          sep = '_';
      
      let str = encodeURIComponent( JSON.stringify(obj, null, 2) ), 
          i = 0, 
          a = [], 
          o = {};
      
      while( str.length > 0 ){
          a.push(str.substring(0, quota));
          str = str.substring(quota);
      }
      
      a.map(item => o[key + sep + i++] = item);
      
      return o;
  }

}

async function syncGet(key) {

  return new Promise((resolve, reject) => {

    try {

      chrome.storage.sync.get(null).then((data) => {
        resolve( assembleObj(key, data) );
      });

    } catch(error) {

      reject({ error });

    }
      
  });

  function assembleObj(key, obj){
      const sep = '_';
      
      let a = Object.keys(obj), 
          res = [];
      
      a = Object.entries(obj).filter(item => new RegExp(`${key}${sep}\\d+$`).test(item[0]));
      a.map(el => res.push(el[1]));

      let output = decodeURIComponent( res.join('') );
      
      try {
        output = JSON.parse( output );
      } catch( error ) {
        output = { error } ;
      }

      return 'error' in output? self.LOCAL : output;
  }

}

/* Storage functions End */

/* Logs function */

function log(){
  const 
      quota = 50,
      printTheLog = () => {
          Console.map( log => console.log( ...log ) );
      };

  globalThis.printLog = globalThis.printLog || printTheLog;

  globalThis.Console = globalThis.Console || [];
  Console = Console.length > quota? [] : Console;

  Console.push([ ...[ `Logged in: ${ new Date().toString().split('GMT')[0] }\n\n`], ...arguments ]);
  Console.push([ '\n---------------------------------------------------------------------------\n\n' ]);

  return;
}

/* Logs function end */
$( () => {

  globalThis.LOCAL = {};

	getLocalStorage()
		.then( storage => LOCAL = storage || LOCAL )
		.then( () => loginPageInit() );

});

function loginPageInit(){

  if( !$('#loginForm').length ) return;
  
  const 
    email = getPropFromUrl('email'),
    acc = getAccount(email),
    secret = LOCAL.salt + getMsg("@@extension_id") + acc.email,
    plainPass = Crypto.AES.decrypt(acc.password || '', secret);

  $('#uname').val(acc.email);
  $('#pass').val(plainPass);

  $('#loginForm')[0].submit();

}
$(() => {

  if( $('.notificationPage').length === 0 ) return;
  
  try {

    localize();
    
    let msg = '';

    if (getTotalUnread() === 1) msg = getMsg('notifMsgOne');
    else msg = getMsg('notifMsg', getTotalUnread() + '');
    
    let html = $('body').html();

    html = html.replace(/#NEW_MSGS#/g, msg);

    $('body').html(html);
    
    showNewMsgsList();

  } catch (e) { 
    log(e); 
  }

});

function showNewMsgsList(accounts) {

  let 
    templ = $('#accTemplate'),
    html = '';
    
  accounts = accounts? accounts : window.getAccounts();
	
  accounts.map( account => {
    if ( typeof account.info !== 'undefined' && 
          typeof account.info.total !== 'undefined' && 
        account.info.total > 0 ) {
      html += `${ account.email } : ${ account.info.total }`;
    }
  } );
  
  log(accounts, html);
  
  // reinit all actions
  $('.accrow a').on('click', function () {
    chrome.tabs.create({ 
      url: ( chrome.runtime.getURL('login.html') + '?email=' + $(this).text() ) 
    });
  });

}
$(function () {
  
  globalThis.LOCAL = {};

	getLocalStorage()
		.then( storage => LOCAL = storage || LOCAL )
    .then( () => initOptionPage() );

  chrome.storage.onChanged.addListener(async function(){
    const storage = await getLocalStorage();
    log('### Ops. - LOCAL has been refreshed. ####', storage, LOCAL);
    LOCAL = { ...LOCAL, ...storage };
  });

});

$.fn.showPass = function(){

  const arr = $(this).toArray();

  arr.map( o => buttonSet(o) );

  function buttonSet(o){
      const 
          dim = o.getBoundingClientRect(),
          input = $(o),
          size = 26;
      
      input.wrap(`<label />`);

      const 
          label = input.parent().css({
                  position: 'relative', 
                  height: `${dim.height}px`,
                  width: 'auto',
                  display: 'inline-block'
          }),
          css = `position: absolute; 
              top: 0; 
              cursor: pointer; 
              right: ${ label.width() - dim.width + 5 }px;
          `.replace(/\s|\n/g, '');
          
      label.append(
          $(`<img src="https://img.abv.bg/images/shown.svg?${Date.now()}"
              style="${css}"
              alt="Покажи паролата" 
              width="${ size }" 
              height="${ size }" alt="Покажи паролата" />`)
              .on('click', function(e){
                  
                  e.preventDefault();

                  const o = $(this);
                  
                  if( /shown/.test( o.attr('src') ) ) {
                      o.attr('src', o.attr('src').replace( /shown/, 'hidden' ).split('?')[0] + '?' + Date.now() );
                      input.attr('type', 'text');
                  }
                  else  {
                      o.attr('src', o.attr('src').replace( /hidden/, 'shown' ).split('?')[0] + '?' + Date.now() );
                      input.attr('type', 'password');
                  }
              })
      );
  }
}

function initOptionPage() {

  if( $('.pageOptions').length === 0 ) return;

  log( '### Option page initialized! ###' );
  
  localize();

  $('#menu div').on('mouseover', function () { $(this).addClass('hover'); } );
  
  $('#menu div').on('mouseout', function () { $(this).removeClass('hover'); } );
  
  $('#menu div:eq(0)').on('click', showSettings);
  $('#menu div:eq(1)').on('click', showAccounts);

  if( $('#options').length || $('#addaccount').length ){

    let Keys = [];

    $('body').on('keyup', function(){
      Keys = [];
    });

    $('body').on('keydown', function(e){
      Keys.push(e.originalEvent.key);
      
      if(Keys.includes('Alt') && Keys.includes('n')) showAccounts();
      if(Keys.includes('Alt') && Keys.includes('s')) showSettings();
      if(Keys.includes('Alt') && Keys.includes('a')) showAddAccount();
      
      if( $('#options').is(':visible') && 
      e.originalEvent.key === 'Enter'){
        setExtOptions();
        Keys = [];
      }
        
      if( $('#addaccount').is(':visible') && 
      e.originalEvent.key === 'Escape'){
        showAccounts();
        Keys = [];
      }

      return;
      
    });

  }
  
  $('#chkInt').on('change', function () {
    $('#chkIntVal').text( $(this).val() );
  });
  
  $('#addacc').on('click', showAddAccount);
  
  $('#delacc').on('click', function () {
    
    let i = 0;
    
    $('.chkbx').each(function () {

      if ( $(this).prop('checked') ) {
        removeAccount($(this).val());
        i++;
      }

    });
    
    if ( i > 0) showStatus( getMsg('statusDeleteOk') );

  });
  
  populateOptions();
  populateAccounts();
  
  $('#saveOptsBtn').on('click', setExtOptions);
  
  $('#addNewBtn').on('click', addAccount);

  $('#newmail, #newpass').on('keyup', function(e){
    if(e.key === 'Enter') addAccount();
    return;
  });
  
  $('#cancelBtn').on('click', showAccounts);
  
  $('#closeBtn, .closeEx').on('click', function () {
    window.close();
  });

  $('#chkInt').on('mousedown', function(){
      $(this).on('mousemove', bindValue);
      $(this).on('mouseup', function(){
          $(this).off('mousemove', bindValue);
      });
      function bindValue(){
          $('#chkIntVal').text(this.value);
      }
  });

  $('input[type="password"]').showPass();
  
  const hash = window.location.hash;
  
  if (hash === '#accounts') {
    showAccounts();
  } else if( /^\#email/.test(hash) ){
    const email = hash.split('=')[1];
    showAccounts();
    openEmail(email);
  } else {
    showSettings();
  }


  $('#newmail').on('blur', function(){
    
    const val = $(this).val().replace(/\s/g, '');

      $(this).val( val );

    if(val && ( !/(?=.*\@)(?=.*(\.bg)$)/.test( val ) || !/\@abv\.bg/.test( val ) )){
      $(this).val( val + '@abv.bg' );
    }
    else 
      return;

  });

}

function openEmail(email){
  let msg = '';
  $('.edit').each(function(){
      const 
          img = $(this),
          txt = img.parent().text().trim();
      if( txt === email ){
          msg = '###Opening email to edit: ', email;
          img.trigger('click');
      }
  });
  return msg;
}

// --- Manage options ---

function accEdit(){
  const 
    p = $(this).parent(),
    email = p.find('input').val(),
    data = $('#details').data(),
    pass = !!LOCAL.accounts.filter(acc => acc.email === email)[0].password;
  showAddAccount();
  $('#savePass').prop('checked', pass);
  data.edit = 1;
  $('#newmail').val( email );
}

function populateOptions() {

  const options = getOptions();

  if(typeof options === 'undefined') return;

  $('#chkInt').val(options.checkInterval);
  $('#chkIntVal').html(options.checkInterval);
  $('#notif').prop('checked', options.showNotif);
  $('#sound').prop('checked', options.playSound);
  $('#spam').prop('checked', options.excludeSpam);
  $('#trash').prop('checked', options.excludeTrash);

}

function setExtOptions() {

  const options = getOptions();

  options.checkInterval = $('#chkInt').val();
  options.playSound = $('#sound').prop('checked');
  options.excludeSpam = $('#spam').prop('checked');
  options.excludeTrash = $('#trash').prop('checked');

  options.showNotif = $('#notif').prop('checked');

  if (Notification.permission !== "granted") {
    Notification.requestPermission().then(function (permission) {
      $('#notif').prop('checked', permission === "granted"? true : false);
    });
  }
  
  saveOptions(options);
  showStatus(getMsg('statusChangesSaved'));
  // sendToExec('checkAllAccounts');

}

// --- Manage accounts ---

function populateAccounts() { 

  const 
    accounts = getAccounts(),
    holder = $('#accounts #accholder'),
    noacc = $('#noacc');

  log( '###Accounts in LOCAL: ', accounts );

  holder.find('*').remove();

  if (accounts.length < 1) {
    noacc.show();
    $('#selall').hide();
	  return;
  }

  noacc.hide();

  let html = '';
    
  accounts.map( account => html += `<div id="accTemplate">
						<div class="accrow">
							<div class="fl"><input class="chkbx" type="checkbox" value="${ account.email }" /></div>
							${ account.email }
              <img class="edit fr" src="i/edit.webp" alt="__MSG_Edit__" width="16" height="auto" />
						</div>
					</div>` );
  
  holder.append(html).show();

  $('#selall').show();
  
    $('.chkbx').on('change', function () {
      if ($(this).is(':checked'))
      $(this).parent().parent().addClass('selrow');
    else
      $(this).parent().parent().removeClass('selrow');
    });
  
    $('#selall').on('click', function () {
    $('.chkbx').prop('checked', $(this).is(':checked'));
    $('.chkbx').trigger('change');

  });

  return html;

}

function addAccount() {

  const
    email = $('#newmail').val().toLowerCase(),
    pass = $('#newpass').val(),
    accounts = getAccounts(),
    checkAccount = !!accountCheck(email),
    max_accounts_number = 6,
    edit = !!$('#details').data('edit'),
    captcha = $('#captchaAnswer').val() || '';
  
  // validate the new account
  if (!email.match(/^[a-z0-9_\.\-]{3,30}@(abv|gbg|gyuvetch)\.bg$/)) {
    return showError(getMsg('errorEmailInvalid'));
  } else if (pass.length < 3) {
    return showError(getMsg('errorPassInvalid'));
  }  else if ( accounts.length >= (edit? max_accounts_number + 1 : max_accounts_number) ) {
    return showError(getMsg('errorMaxAccounts') + max_accounts_number);
  }

  log('### Check account: ', checkAccount);
  // check if account already exists
  if ( checkAccount && !edit ) {
    return showError(getMsg('errorEmailExist'));
  }

  try {
    const json = getTokens(email, pass, captcha);
    json.then(processResponse);
  } catch(err) {
    log(err);
    showError(err);
  }

  function processResponse(data){

    const 
      error = 'error' in data,
      captcha = 'show_captcha' in data && data.show_captcha === 'true',
      locked = 'username_locked' in data && data.username_locked === 'true';

    let msg = '';

    if( error && captcha && locked ) {
      msg = getMsg('errorBlockedAcc');
      getCaptcha();
      $('#refresh').on('click', getCaptcha);
    } else if ( error && captcha ) {
      msg = getMsg('errorUserPass');
      getCaptcha();
    } else if ( error && data.error === 'unauthorized_user' ) {
      msg = getMsg('errorUserPass');
    }

    if( msg ) {
      showError(msg);
      return;
    }

    if( edit ) {
      removeAccount(email);
      $('#details').removeData('edit');
    }

    createNewAccount(data);

  }

  function accountCheck(email) {
  
    const 
      accounts = getAccounts(), 
      acc = accounts.filter( account => account.email === email );
    
    return acc.length? acc[0] : '';
  
  }
    
  function createNewAccount(data){
    
    // creates new account object
    class accountObj {
      email = '';
      password = '';
      info = '';
      access_token = '';
      expires_in = 0
      refresh_token = '';
    }

    const account = new accountObj();

    account.email = email;

    if ( !LOCAL.salt ){
      LOCAL.salt = genSalt(10);
    }
    
    // make at least some kind of crypting before storing
    const 
      secret = LOCAL.salt + getMsg('@@extension_id') + email,
      crypted = Crypto.AES.encrypt(pass, secret);

    account.password = $('#savePass').prop('checked')? crypted : '';

    if( 'refresh_token' in data ) account.refresh_token = data.refresh_token;
    if( 'access_token' in data ) account.access_token = data.access_token;
    if( 'expires_in' in data ) account.expires_in = Date.now() + data.expires_in * 1000;
      
    // add the new account and check it
    addNewAccount(account);
    populateAccounts();
    showStatus(getMsg('statusAccountAdded'));
    showAccounts();
    // sendToExec('checkAllAccounts');
    
  }

}

function removeAccount(email) {
  deleteAccount(email);
  populateAccounts();
  // send message to Service Worker to check accounts
  // sendToExec('checkAllAccounts');
}

function showError(txt) {
  $('#status').html('<div class="fl" id="error">' + txt +  '</div>');
  $('#status #error').delay(5000).fadeOut();
}

function showStatus(txt) {
  $('#status').html('<div class="fl" id="info">' + txt +  '</div>');
  $('#status #info').delay(5000).fadeOut();
}

function showSettings() {
  
  $('#menu div').each(function () {
	  $(this).removeClass('sel');
  });

  $('#menu div:eq(0)').addClass('sel');
  
  $('#tasks div').hide();
  $('#accounts').hide();
  $('#addaccount').hide();
  $('#options').show();

}

function showAccounts() {
  
  $('#menu div').each(function () {
	  $(this).removeClass('sel');
  });

  $('#menu div:eq(1)').addClass('sel');
  
  $('#options').hide();
  $('#addaccount').hide();
  $('#tasks div').show();
  $('#accounts').show();

  $('.edit').on('click', accEdit);

}

function showAddAccount() {
  $('#options, #accounts, #tasks div').hide();
  $('#addaccount').show();
  $('#newmail, #newpass').val('');
  $('#newmail')[0].focus();
  $('.enterCaptcha').hide();
}

// --- ACCOUNT MANAGEMENT FUNCTIONS ---

function addNewAccount(account) {
  let accounts = getAccounts();
  accounts.push(account);
  setAccounts(accounts);
}

function deleteAccount(email) {
  
  let accounts = getAccounts();
  
  for (let i in accounts) {
    if (accounts[i].email === email) {
      accounts.splice(i, 1);
      break;
    }
  }

  setAccounts(accounts);

}

function setAccounts(accounts) {
  LOCAL.accounts = accounts;
  saveLocalStorage(LOCAL);
}
$(function () {

	LOCAL = self.LOCAL || {};

	getLocalStorage()
		.then( storage => LOCAL = storage || LOCAL )
		.then( () => popupInitialize() );

	chrome.storage.onChanged.addListener(data  => {
		getLocalStorage()
			.then(storage => log('### POP - LOCAL has been refreshed. ###', data, storage))
			.then(refreshView);
	});

});

function popupInitialize() {

	if( $('.popupPage').length === 0 ) return;
  
	localize();
	refreshView();

	$('#chknow').on('click', async function () {

		$('#loader').show();
		// hiding loader in case of failed fade
		setTimeout(()=>{
			const ldr = $('#loader');
			if( ldr.is(':visible') )
				ldr.delay(400).fadeOut(200);
		}, 5000);

		const currTime = (new Date()).getTime();

		if (currTime > (getLastManCheck() + 10 * 1000)) {
			setLastManCheck(currTime);
			await saveLocalStorage(LOCAL);
			sendToExec('checkAllAccounts');
		}

	});

	$('.opts').on('click', gotoOps);

}

async function gotoOps(){
	const 
			img = $(this),
			email = img.parents('.accrow')
				.find('a').text().trim();

	const tab = await chrome.tabs
		.create( { url: chrome.runtime.getURL('options.html#email=' + email) } );

	return tab;
}

function refreshView() {
	
	const accounts = getAccounts();

	if (accounts.length < 1) {
		$('#noacc').show();
		return;
	}

  	$('#noacc').hide();
  
  	const templ = $('.popupPage #accTemplate');

	let html = '';
    
  	accounts.map( account => html += accountStatus(account) );
  
	templ.find('*').remove();
	templ.append(html).show();

	$('#loader').delay(400).fadeOut(200);
  
	// reinit all actions
	$('.accrow a').on('click', function () {
	if( 'tabs' in chrome ) 
		chrome.tabs.create( {
			url: chrome.runtime.getURL('login.html') + '?email=' + $(this).text()
		} );
	});
  
	$('.accrow .unread').on('mouseover', function (evt) {

	const block = $('.details', $(this).parent());

	if (block.css('display') == 'none')
		var calcTop = evt.pageY - block.outerHeight() - 5;
		var calcLeft = evt.pageX - block.outerWidth() - 5;
		if (calcTop < 0) calcTop = 0;
		
		block.css({top: calcTop, left: calcLeft}).show();
	});

	$('.accrow .unread').on('mouseout', function () {
		const block = $('.details', $(this).parent());
		block.hide();
	});

	if($('.gotoOps').length) $('.gotoOps').on('click', gotoOps);

}

function accountStatus(account){

	log( '##Account: ', account );
	
	let 
		total = '-', 
		folder = '', 
		email = account.email? account.email : '',
		html = '';

	if ('info' in account && isNotEmpty(account.info)) {

		/* API errors reverence:
          error: "unauthorized_user"
          error_description: "Authentication failed"
          show_captcha: "true"
          username_locked: "true"
        */

		const
			folderContent = 'folders' in account.info && typeof account.info.folders === 'object'? 
				account.info.folders[0] || {} : {}, 
			status = 'status' in folderContent && !!folderContent.status? 
				// add new errors here!
				folderContent.status === 'invalid_token'? 1 : 
				folderContent.status === 'unauthorized_user'? 2 : 
				folderContent.status === 'show_captcha'? 3 : 
				folderContent.status === 'username_locked'? 4 : 5 : 
				'error' in account.info && account.info.error === 'ERROR_REQUEST_FAILED'? 6 : 
				0;

		console.log('###Request status: ', folderContent, status)

		if (typeof account.info.folders === 'object' && !status ) {

			const folders = account.info.folders;

			total = getCount(folders);

			for (let j in folders) {

				const f = folders[j];

				if( isFolderNotSpam(f) && isFolderNotTrash(f) && parseInt( f.newItems ) > 0 ) {
					folder += ( j < 1 ? '' : '<br />' ) + f.name;
					folder += `: <strong>${ f.newItems }</strong>`;
				}


			}

		} else if( status === 0 ){
			total = 0;
		}

		if( total === 0 ) {
			folder = `<p> ${ getMsg('notifMsgBless', 0 + '') } </p>`;
		}

		log( '##Account status: ', email, account.info, total, status, folder );
	
		if ( status > 0 ) {

			folder = '<div class="err">';
				
				switch (status) {
					case 1:
					case 2:
						folder += getMsg('errorAccessToken');
						total = '<img src="i/red_alert.gif" class="gotoOps" alt="" />';
						break;
					case 4:
						folder += getMsg('errorBlockedAcc');
						total = '<img src="i/alert.gif" alt="" />';
						break;
					case 3:
						folder += getMsg('errorRateLimit');
						total = '<img src="i/alert.gif" alt="" />';
						break;
					case 5:
						folder += getMsg('errorServer');
						total = '<img src="i/alert.gif" alt="" />';
						break;
					default:
						folder += getMsg('errorConnection');
						total = '<img src="i/alert.gif" alt="" />';
						break;		
				}

			folder += '</div>';

		}
	
	}

	const title = '__MSG_goToMail__'.replace(/__MSG_([^_]+)__/g, function (m, key) {
		return chrome.i18n.getMessage(key);
	});

	html += `<div class="accrow x">
			<a title="${ title }" class="cp">${ email }</a>
			<div class="fr unread">
				<strong>${ total }</strong>
			</div>
			<div class="details shadow" style="display: none;">
				<h3>${ email }</h3>
				${ folder }
			</div>
		</div>`;

	return html;

	function isNotEmpty(obj){
		return Object.keys(obj).length;
	}

}
/*
 * Crypto-JS v2.5.2
 * http://code.google.com/p/crypto-js/
 * (c) 2009-2011 by Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
(typeof Crypto=="undefined"||!Crypto.util)&&function(){var d=window.Crypto={},j=d.util={rotl:function(e,c){return e<<c|e>>>32-c},rotr:function(e,c){return e<<32-c|e>>>c},endian:function(e){if(e.constructor==Number)return j.rotl(e,8)&16711935|j.rotl(e,24)&4278255360;for(var c=0;c<e.length;c++)e[c]=j.endian(e[c]);return e},randomBytes:function(e){for(var c=[];e>0;e--)c.push(Math.floor(Math.random()*256));return c},bytesToWords:function(e){for(var c=[],b=0,a=0;b<e.length;b++,a+=8)c[a>>>5]|=e[b]<<24-
a%32;return c},wordsToBytes:function(e){for(var c=[],b=0;b<e.length*32;b+=8)c.push(e[b>>>5]>>>24-b%32&255);return c},bytesToHex:function(e){for(var c=[],b=0;b<e.length;b++)c.push((e[b]>>>4).toString(16)),c.push((e[b]&15).toString(16));return c.join("")},hexToBytes:function(e){for(var c=[],b=0;b<e.length;b+=2)c.push(parseInt(e.substr(b,2),16));return c},bytesToBase64:function(e){if(typeof btoa=="function")return btoa(f.bytesToString(e));for(var c=[],b=0;b<e.length;b+=3)for(var a=e[b]<<16|e[b+1]<<8|
e[b+2],k=0;k<4;k++)b*8+k*6<=e.length*8?c.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(a>>>6*(3-k)&63)):c.push("=");return c.join("")},base64ToBytes:function(e){if(typeof atob=="function")return f.stringToBytes(atob(e));for(var e=e.replace(/[^A-Z0-9+\/]/ig,""),c=[],b=0,a=0;b<e.length;a=++b%4)a!=0&&c.push(("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e.charAt(b-1))&Math.pow(2,-2*a+8)-1)<<a*2|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(e.charAt(b))>>>
6-a*2);return c}},d=d.charenc={};d.UTF8={stringToBytes:function(e){return f.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(f.bytesToString(e)))}};var f=d.Binary={stringToBytes:function(e){for(var c=[],b=0;b<e.length;b++)c.push(e.charCodeAt(b)&255);return c},bytesToString:function(e){for(var c=[],b=0;b<e.length;b++)c.push(String.fromCharCode(e[b]));return c.join("")}}}();
(function(){var d=Crypto,j=d.util,f=d.charenc,e=f.UTF8,c=f.Binary,b=d.SHA1=function(a,k){var e=j.wordsToBytes(b._sha1(a));return k&&k.asBytes?e:k&&k.asString?c.bytesToString(e):j.bytesToHex(e)};b._sha1=function(a){a.constructor==String&&(a=e.stringToBytes(a));var b=j.bytesToWords(a),l=a.length*8,a=[],c=1732584193,h=-271733879,d=-1732584194,f=271733878,s=-1009589776;b[l>>5]|=128<<24-l%32;b[(l+64>>>9<<4)+15]=l;for(l=0;l<b.length;l+=16){for(var g=c,n=h,r=d,m=f,o=s,p=0;p<80;p++){if(p<16)a[p]=b[l+p];else{var v=
a[p-3]^a[p-8]^a[p-14]^a[p-16];a[p]=v<<1|v>>>31}v=(c<<5|c>>>27)+s+(a[p]>>>0)+(p<20?(h&d|~h&f)+1518500249:p<40?(h^d^f)+1859775393:p<60?(h&d|h&f|d&f)-1894007588:(h^d^f)-899497514);s=f;f=d;d=h<<30|h>>>2;h=c;c=v}c+=g;h+=n;d+=r;f+=m;s+=o}return[c,h,d,f,s]};b._blocksize=16;b._digestsize=20})();
(function(){var d=Crypto,j=d.util,f=d.charenc,e=f.UTF8,c=f.Binary;d.HMAC=function(b,a,k,l){a.constructor==String&&(a=e.stringToBytes(a));k.constructor==String&&(k=e.stringToBytes(k));k.length>b._blocksize*4&&(k=b(k,{asBytes:!0}));for(var d=k.slice(0),k=k.slice(0),h=0;h<b._blocksize*4;h++)d[h]^=92,k[h]^=54;b=b(d.concat(b(k.concat(a),{asBytes:!0})),{asBytes:!0});return l&&l.asBytes?b:l&&l.asString?c.bytesToString(b):j.bytesToHex(b)}})();
(function(){var d=Crypto,j=d.util,f=d.charenc,e=f.UTF8,c=f.Binary;d.PBKDF2=function(b,a,k,l){function u(b,a){return d.HMAC(h,a,b,{asBytes:!0})}b.constructor==String&&(b=e.stringToBytes(b));a.constructor==String&&(a=e.stringToBytes(a));for(var h=l&&l.hasher||d.SHA1,f=l&&l.iterations||1,q=[],s=1;q.length<k;){for(var g=u(b,a.concat(j.wordsToBytes([s]))),n=g,r=1;r<f;r++)for(var n=u(b,n),m=0;m<g.length;m++)g[m]^=n[m];q=q.concat(g);s++}q.length=k;return l&&l.asBytes?q:l&&l.asString?c.bytesToString(q):j.bytesToHex(q)}})();
(function(d){function j(b,a){var k=b._blocksize*4;return k-a.length%k}var f=d.pad={},e=function(b){for(var a=b.pop(),k=1;k<a;k++)b.pop()};f.NoPadding={pad:function(){},unpad:function(){}};f.ZeroPadding={pad:function(b,a){var k=b._blocksize*4,e=a.length%k;if(e!=0)for(e=k-e;e>0;e--)a.push(0)},unpad:function(){}};f.iso7816={pad:function(b,a){var e=j(b,a);for(a.push(128);e>1;e--)a.push(0)},unpad:function(b){for(;b.pop()!=128;);}};f.ansix923={pad:function(b,a){for(var e=j(b,a),c=1;c<e;c++)a.push(0);a.push(e)},
unpad:e};f.iso10126={pad:function(b,a){for(var e=j(b,a),c=1;c<e;c++)a.push(Math.floor(Math.random()*256));a.push(e)},unpad:e};f.pkcs7={pad:function(b,a){for(var e=j(b,a),c=0;c<e;c++)a.push(e)},unpad:e};var d=d.mode={},c=d.Mode=function(b){if(b)this._padding=b};c.prototype={encrypt:function(b,a,e){this._padding.pad(b,a);this._doEncrypt(b,a,e)},decrypt:function(b,a,e){this._doDecrypt(b,a,e);this._padding.unpad(a)},_padding:f.iso7816};e=(d.ECB=function(){c.apply(this,arguments)}).prototype=new c;e._doEncrypt=
function(b,a){for(var e=b._blocksize*4,c=0;c<a.length;c+=e)b._encryptblock(a,c)};e._doDecrypt=function(b,a){for(var e=b._blocksize*4,c=0;c<a.length;c+=e)b._decryptblock(a,c)};e.fixOptions=function(b){b.iv=[]};e=(d.CBC=function(){c.apply(this,arguments)}).prototype=new c;e._doEncrypt=function(b,a,e){for(var c=b._blocksize*4,d=0;d<a.length;d+=c){if(d==0)for(var h=0;h<c;h++)a[h]^=e[h];else for(h=0;h<c;h++)a[d+h]^=a[d+h-c];b._encryptblock(a,d)}};e._doDecrypt=function(b,a,e){for(var c=b._blocksize*4,d=
0;d<a.length;d+=c){var h=a.slice(d,d+c);b._decryptblock(a,d);for(var f=0;f<c;f++)a[d+f]^=e[f];e=h}};e=(d.CFB=function(){c.apply(this,arguments)}).prototype=new c;e._padding=f.NoPadding;e._doEncrypt=function(b,e,c){for(var d=b._blocksize*4,c=c.slice(0),f=0;f<e.length;f++){var h=f%d;h==0&&b._encryptblock(c,0);e[f]^=c[h];c[h]=e[f]}};e._doDecrypt=function(e,a,c){for(var d=e._blocksize*4,c=c.slice(0),f=0;f<a.length;f++){var h=f%d;h==0&&e._encryptblock(c,0);var j=a[f];a[f]^=c[h];c[h]=j}};e=(d.OFB=function(){c.apply(this,
arguments)}).prototype=new c;e._padding=f.NoPadding;e._doEncrypt=function(e,c,d){for(var f=e._blocksize*4,d=d.slice(0),j=0;j<c.length;j++)j%f==0&&e._encryptblock(d,0),c[j]^=d[j%f]};e._doDecrypt=e._doEncrypt;d=(d.CTR=function(){c.apply(this,arguments)}).prototype=new c;d._padding=f.NoPadding;d._doEncrypt=function(e,c,d){for(var f=e._blocksize*4,j=0;j<c.length;){var h=d.slice(0);e._encryptblock(h,0);for(var t=0;j<c.length&&t<f;t++,j++)c[j]^=h[t];++d[f-1]==256&&(d[f-1]=0,++d[f-2]==256&&(d[f-2]=0,++d[f-
3]==256&&(d[f-3]=0,++d[f-4])))}};d._doDecrypt=d._doEncrypt})(Crypto);
(function(){function d(e,c){for(var b=0,a=0;a<8;a++){c&1&&(b^=e);var d=e&128,e=e<<1&255;d&&(e^=27);c>>>=1}return b}for(var j=Crypto,f=j.util,e=j.charenc.UTF8,c=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,
208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,
206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],b=[],a=0;a<256;a++)b[c[a]]=a;for(var k=[],l=[],u=[],h=[],t=[],q=[],a=0;a<256;a++)k[a]=d(a,2),l[a]=d(a,3),u[a]=d(a,9),h[a]=d(a,11),t[a]=d(a,13),q[a]=d(a,14);var s=[0,1,2,4,8,16,32,64,128,27,54],g=[[],[],[],[]],n,r,m,o=j.AES={encrypt:function(c,b,a){var a=a||{},i=a.mode||new j.mode.OFB;i.fixOptions&&i.fixOptions(a);var c=c.constructor==String?e.stringToBytes(c):c,d=a.iv||f.randomBytes(o._blocksize*4),b=b.constructor==String?j.PBKDF2(b,
d,32,{asBytes:!0}):b;o._init(b);i.encrypt(o,c,d);c=a.iv?c:d.concat(c);return a&&a.asBytes?c:f.bytesToBase64(c)},decrypt:function(c,b,a){var a=a||{},i=a.mode||new j.mode.OFB;i.fixOptions&&i.fixOptions(a);var c=c.constructor==String?f.base64ToBytes(c):c,d=a.iv||c.splice(0,o._blocksize*4),b=b.constructor==String?j.PBKDF2(b,d,32,{asBytes:!0}):b;o._init(b);i.decrypt(o,c,d);return a&&a.asBytes?c:e.bytesToString(c)},_blocksize:4,_encryptblock:function(e,a){for(var b=0;b<o._blocksize;b++)for(var i=0;i<4;i++)g[b][i]=
e[a+i*4+b];for(b=0;b<4;b++)for(i=0;i<4;i++)g[b][i]^=m[i][b];for(var d=1;d<r;d++){for(b=0;b<4;b++)for(i=0;i<4;i++)g[b][i]=c[g[b][i]];g[1].push(g[1].shift());g[2].push(g[2].shift());g[2].push(g[2].shift());g[3].unshift(g[3].pop());for(i=0;i<4;i++){var b=g[0][i],f=g[1][i],h=g[2][i],j=g[3][i];g[0][i]=k[b]^l[f]^h^j;g[1][i]=b^k[f]^l[h]^j;g[2][i]=b^f^k[h]^l[j];g[3][i]=l[b]^f^h^k[j]}for(b=0;b<4;b++)for(i=0;i<4;i++)g[b][i]^=m[d*4+i][b]}for(b=0;b<4;b++)for(i=0;i<4;i++)g[b][i]=c[g[b][i]];g[1].push(g[1].shift());
g[2].push(g[2].shift());g[2].push(g[2].shift());g[3].unshift(g[3].pop());for(b=0;b<4;b++)for(i=0;i<4;i++)g[b][i]^=m[r*4+i][b];for(b=0;b<o._blocksize;b++)for(i=0;i<4;i++)e[a+i*4+b]=g[b][i]},_decryptblock:function(c,e){for(var a=0;a<o._blocksize;a++)for(var d=0;d<4;d++)g[a][d]=c[e+d*4+a];for(a=0;a<4;a++)for(d=0;d<4;d++)g[a][d]^=m[r*4+d][a];for(var f=1;f<r;f++){g[1].unshift(g[1].pop());g[2].push(g[2].shift());g[2].push(g[2].shift());g[3].push(g[3].shift());for(a=0;a<4;a++)for(d=0;d<4;d++)g[a][d]=b[g[a][d]];
for(a=0;a<4;a++)for(d=0;d<4;d++)g[a][d]^=m[(r-f)*4+d][a];for(d=0;d<4;d++){var a=g[0][d],j=g[1][d],k=g[2][d],l=g[3][d];g[0][d]=q[a]^h[j]^t[k]^u[l];g[1][d]=u[a]^q[j]^h[k]^t[l];g[2][d]=t[a]^u[j]^q[k]^h[l];g[3][d]=h[a]^t[j]^u[k]^q[l]}}g[1].unshift(g[1].pop());g[2].push(g[2].shift());g[2].push(g[2].shift());g[3].push(g[3].shift());for(a=0;a<4;a++)for(d=0;d<4;d++)g[a][d]=b[g[a][d]];for(a=0;a<4;a++)for(d=0;d<4;d++)g[a][d]^=m[d][a];for(a=0;a<o._blocksize;a++)for(d=0;d<4;d++)c[e+d*4+a]=g[a][d]},_init:function(a){n=
a.length/4;r=n+6;o._keyexpansion(a)},_keyexpansion:function(a){m=[];for(var b=0;b<n;b++)m[b]=[a[b*4],a[b*4+1],a[b*4+2],a[b*4+3]];for(b=n;b<o._blocksize*(r+1);b++)a=[m[b-1][0],m[b-1][1],m[b-1][2],m[b-1][3]],b%n==0?(a.push(a.shift()),a[0]=c[a[0]],a[1]=c[a[1]],a[2]=c[a[2]],a[3]=c[a[3]],a[0]^=s[b/n]):n>6&&b%n==4&&(a[0]=c[a[0]],a[1]=c[a[1]],a[2]=c[a[2]],a[3]=c[a[3]]),m[b]=[m[b-n][0]^a[0],m[b-n][1]^a[1],m[b-n][2]^a[2],m[b-n][3]^a[3]]}}})();
